[{"/home/beliya_user/Blog Management/src/index.js":"1","/home/beliya_user/Blog Management/src/App.js":"2","/home/beliya_user/Blog Management/src/reportWebVitals.js":"3","/home/beliya_user/Blog Management/src/LogOut.js":"4","/home/beliya_user/Blog Management/src/SignUp.js":"5","/home/beliya_user/Blog Management/src/HomePage.js":"6","/home/beliya_user/Blog Management/src/Navbar.js":"7","/home/beliya_user/Blog Management/src/Dashboard.js":"8","/home/beliya_user/Blog Management/src/apiService.js":"9","/home/beliya_user/Blog Management/src/LogIn.js":"10"},{"size":494,"mtime":1697921259604,"results":"11","hashOfConfig":"12"},{"size":794,"mtime":1697912049028,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1697912296448,"results":"14","hashOfConfig":"12"},{"size":634,"mtime":1697912634058,"results":"15","hashOfConfig":"12"},{"size":2851,"mtime":1697912442138,"results":"16","hashOfConfig":"12"},{"size":3458,"mtime":1697912674468,"results":"17","hashOfConfig":"12"},{"size":2078,"mtime":1697912570538,"results":"18","hashOfConfig":"12"},{"size":7482,"mtime":1697912733728,"results":"19","hashOfConfig":"12"},{"size":4939,"mtime":1697921838005,"results":"20","hashOfConfig":"12"},{"size":2282,"mtime":1697912263188,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kv734l",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/beliya_user/Blog Management/src/index.js",[],[],"/home/beliya_user/Blog Management/src/App.js",[],[],"/home/beliya_user/Blog Management/src/reportWebVitals.js",[],[],"/home/beliya_user/Blog Management/src/LogOut.js",[],[],"/home/beliya_user/Blog Management/src/SignUp.js",[],[],"/home/beliya_user/Blog Management/src/HomePage.js",[],[],"/home/beliya_user/Blog Management/src/Navbar.js",[],[],"/home/beliya_user/Blog Management/src/Dashboard.js",[],[],"/home/beliya_user/Blog Management/src/apiService.js",["53"],[],"const baseURL = \"http://localhost:5000\";\n\nconst defaultHeaders = () => ({\n  'Authorization': `Bearer ${localStorage.getItem('token')}`\n});\n\nconst encodeFormData = (data) => {\n  return Object.keys(data)\n    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    .join('&');\n}\n\n\nexport const modifyBlogPost = async (blogId, title, content) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/blogposts/${blogId}`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json', ...defaultHeaders() },\n      body: JSON.stringify({ title, content })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying blog post:\", error);\n    throw error;\n  }\n};\n\nexport const deleteBlogPost = async (blogId) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/blogposts/${blogId}`, {\n      method: 'DELETE',\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error deleting blog post:\", error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const signUp = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/signup`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error signing up:\", error);\n    throw error;\n  }\n};\n\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    throw error;\n  }\n};\n\nexport const logout = async () => {\n  try {\n    const response = await fetch(`${baseURL}/routes/logout`, { \n      method: 'POST', \n      headers: defaultHeaders() \n    });\n    if (!response.ok) {\n      const text = await response.text();\n      try {\n        const data = JSON.parse(text);\n        throw new Error(data.message || 'Invalid response from server.');\n      } catch {\n        throw new Error(text || 'Invalid response from server.');\n      }\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging out:\", error);\n    throw error;\n  }\n};\n\n\nexport const createBlogPost = async (title, content, image) => {\n  try {\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    if (image) {\n        formData.append('image', image);\n    }\n\n    const response = await fetch(`${baseURL}/routes/blogposts`, {\n      method: 'POST',\n      headers: {\n          ...defaultHeaders()\n      },\n      body: formData\n  });\n  \n\n    if (!response.ok) {\n        throw new Error(`Failed to create blog post (HTTP ${response.status})`);\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating blog post:\", error);\n    throw error;\n  }\n};\n\n\n\n\n\nexport const getBlogPosts = async () => {\n  try {\n    const response = await fetch(`${baseURL}/routes/blogposts`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching user blog posts:\", error);\n    throw error;\n  }\n};\n\n// Review API\nexport const createReview = async (blogId, reviewText) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/blogposts/${blogId}/reviews`, {\n      method: 'POST',\n      headers: {\n        ...defaultHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ content: reviewText })\n\n      // body: JSON.stringify({ text: reviewText })  // assuming your backend expects the key to be \"text\"\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create review (HTTP ${response.status})`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating review:\", error);\n    throw error;\n  }\n};\n\n\nexport const getReviews = async (blogId) => {\n  try {\n    const response = await fetch(`${baseURL}/routes/blogposts/${blogId}/reviews`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    throw error;\n  }\n};\n","/home/beliya_user/Blog Management/src/LogIn.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":7,"column":7,"nodeType":"56","messageId":"57","endLine":7,"endColumn":21},"no-unused-vars","'encodeFormData' is assigned a value but never used.","Identifier","unusedVar"]